openapi: 3.0.2

servers:
  - description: Local Dev
    url: http://localhost:5000
  - description: Mock Service
    url: https://mock.api.opiscloud.com/admin
  - description: Dev Api
    url: https://dev.api.opiscloud.com/admin
  - description: Test Api
    url: https://test.api.opiscloud.com/admin
  - description: Prod Api
    url: https://api.opiscloud.com/admin

info:
  title: Opis Admin Api
  description: Opis Admin Services Documentation
  contact:
    email: admin@albatr.com
  version: "v1"

tags:
  - name: Database Servers
    description: Database server management operations
  - name: Tenants
    description: Tenant management operations
  - name: Machine Types
    description: Machine Types management operations

paths:
  # Database Servers----------------------------------------------------
  #
  /database-servers:
    post:
      tags:
        - Database Servers
      summary: Creates new database server
      description: Creates new database server
      operationId: createDatabaseServer
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
      requestBody:
        description: Create database server request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatabaseServerViewModel"
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResponseModel"
          headers:
            Content-Language:
              $ref: "#/components/headers/Content-Language"
            Location:
              $ref: "#/components/headers/Location"
        400:
          $ref: "#/components/responses/BadRequest"
        409:
          $ref: "#/components/responses/Conflict"
      security:
        - OpenID: [hedehodo, zurnas, admin]

    get:
      tags:
        - Database Servers
      description: List database servers
      operationId: listDatabaseServers
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Term"
        - $ref: "#/components/parameters/Sort"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseServerListModel"
          headers:
            Content-Language:
              $ref: "#/components/headers/Content-Language"
      security:
        - OpenID: [hedehodo, zurnas, admin]

  /database-servers/{id}:
    get:
      tags:
        - Database Servers
      summary: Get specified database server
      description: Get specified database server
      operationId: getDatabaseServer
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
        - $ref: "#/components/parameters/IdParameter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseServerViewModel"
          headers:
            Content-Language:
              $ref: "#/components/headers/Content-Language"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
      security:
        - OpenID: [hedehodo, zurnas, admin]

    put:
      tags:
        - Database Servers
      summary: Updates database server
      description: Updates database server
      operationId: updateDatabaseServer
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
        - $ref: "#/components/parameters/IdParameter"
      requestBody:
        description: Database server update request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatabaseServerViewModel"
        required: true
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
      security:
        - OpenID: [hedehodo, zurnas, admin]

    delete:
      tags:
        - Database Servers
      summary: Deletes database server
      description: Deletes database server
      operationId: deleteDatabaseServer
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
        - $ref: "#/components/parameters/IdParameter"
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
      security:
        - OpenID: [hedehodo, zurnas, admin]

    # Tenants----------------------------------------------------
  /tenants:
    post:
      tags:
        - Tenants
      summary: Creates new tenant
      description: Creates new tenant
      operationId: createTenant
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
      requestBody:
        description: Create tenant request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantCreateModel"
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResponseModel"
          headers:
            Content-Language:
              $ref: "#/components/headers/Content-Language"
            Location:
              $ref: "#/components/headers/Location"
        400:
          $ref: "#/components/responses/BadRequest"
        409:
          $ref: "#/components/responses/Conflict"
      security:
        - OpenID: [write]

    get:
      tags:
        - Tenants
      summary: Get all tenants
      description: Get all tenants
      operationId: getTenants
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Term"
        - $ref: "#/components/parameters/Sort"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantListModel"
          headers:
            Content-Language:
              $ref: "#/components/headers/Content-Language"
        400:
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
      security:
        - OAuth2: [read]

  /tenants/{id}:
    get:
      tags:
        - Tenants
      summary: Get tenant
      description: Get tenant
      operationId: getTenant
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
        - $ref: "#/components/parameters/IdParameter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantViewModel"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"

    put:
      tags:
        - Tenants
      summary: Update tenant
      description: Update tenant
      operationId: updateTenant
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
        - $ref: "#/components/parameters/IdParameter"
      # requestBody:
      #   content:
      #     multipart/form-data:
      #       schema:
      #         $ref: "#/components/schemas/TenantUpdateModel"
      #   required: true
      requestBody:
        description: update tenant request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantViewModel"
        required: true
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: [hedehodo]

    delete:
      tags:
        - Tenants
      summary: Delete tenant
      description: Delete tenant
      operationId: deleteTenant
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
        - $ref: "#/components/parameters/IdParameter"
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: [hedehodo]

    # Machine Types----------------------------------------------------

  /machine-types:
    post:
      tags:
        - Machine Types
      summary: Create new machine-type for tenant
      description: Create new machine-type for tenant
      operationId: createMachineType
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
      requestBody:
        description: Create machine-type request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MachineTypeViewModel"
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResponseModel"
          headers:
            Content-Language:
              $ref: "#/components/headers/Content-Language"
            Location:
              $ref: "#/components/headers/Location"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
      security:
        - bearerAuth: [hedehodo]

    get:
      tags:
        - Machine Types
      summary: Get all machine-type of tenant
      description: Get all machine-type of tenant
      operationId: getMachineTypes
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Term"
        - $ref: "#/components/parameters/Sort"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MachineTypeListModel"
          headers:
            Content-Language:
              $ref: "#/components/headers/Content-Language"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: [hedehodo]

  /machine-types/{id}:
    get:
      tags:
        - Machine Types
      summary: Get tenant machine-type
      description: Get tenant machine-type
      operationId: getMachineType
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
        - $ref: "#/components/parameters/IdParameter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MachineTypeViewModel"
          headers:
            Content-Language:
              $ref: "#/components/headers/Content-Language"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: [hedehodo]

    put:
      tags:
        - Machine Types
      summary: Update tenant machine-type
      description: Update tenant machine-type
      operationId: updateMachineType
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
        - $ref: "#/components/parameters/IdParameter"
      requestBody:
        description: Create machine-type request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MachineTypeViewModel"
        required: true
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: [hedehodo]

    delete:
      tags:
        - Machine Types
      summary: Delete tenant machine-type
      description: Delete tenant machine-type
      operationId: deleteMachineType
      parameters:
        - $ref: "#/components/parameters/AcceptLanguageParameter"
        - $ref: "#/components/parameters/IdParameter"
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: [hedehodo]

components:
  headers:
    Location:
      schema:
        type: string
        format: url
      description: A link to created resource
    Content-Language:
      schema:
        type: string
        enum:
          - tr-TR
          - en-US
      description: the language(s) intended for the audience
      example: tr-TR
    X-Total-Count:
      schema:
        type: integer
      description: Total items count
      example: 3
    X-RateLimit-Limit:
      schema:
        type: integer
      description: Request limit per hour.
    X-RateLimit-Remaining:
      schema:
        type: integer
      description: The number of requests left for the time window.
    X-RateLimit-Reset:
      schema:
        type: string
        format: date-time
      description: The UTC date/time at which the current rate limit window resets.

  parameters:
    AcceptLanguageParameter:
      name: Accept-Language
      in: header
      required: true
      schema:
        type: string
        enum:
          - tr
          - en
          - tr-TR
          - en-US
      description: language(s) client is able to understand, and which locale variant is preferred
      example: tr
    Offset:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result set.
      schema:
        type: integer
        minimum: 0
        default: 0
    Limit:
      name: limit
      in: query
      description: The numbers of items to return.
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
    Term:
      name: term
      in: query
      description:
        Filter argument in which to retrieve the results. Basic text search on
        relevant fields
      schema:
        type: string
        default: ""
    Sort:
      name: sort
      in: query
      description:
        Order in which to retrieve the results. Multiple sort criteria can not
        be passed
      schema:
        type: string
        default: ""
    IdParameter:
      name: id
      in: path
      schema:
        type: string
        format: uuid
      required: true
      description: Resource Id

  responses:
    BadRequest:
      description: The specified resource was not valid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorViewModel"
      headers:
        Content-Language:
          $ref: "#/components/headers/Content-Language"
    Conflict:
      description: The specified resource already persisted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorViewModel"
      headers:
        Content-Language:
          $ref: "#/components/headers/Content-Language"
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorViewModel"
      headers:
        Content-Language:
          $ref: "#/components/headers/Content-Language"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorViewModel"
      headers:
        Content-Language:
          $ref: "#/components/headers/Content-Language"
    NoContent:
      description: No Content

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes: {}
    OpenID:
      type: openIdConnect
      openIdConnectUrl: https://qpay-auth.test.agr.ist/realms/employees/.well-known/openid-configuration

  schemas:
    ErrorViewModel:
      type: object
      properties:
        code:
          type: string
          example: fC9LZX
        title:
          type: string
          example: Invalid request parameters
        detail:
          type: string
          example: The provided resource parameters are not valid.
        errors:
          type: array
          items:
            type: string
            example: validation error message
      required:
        - code
        - title
        - detail

    CreatedResponseModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
    # Database Servers----------------------------------------------------
    DatabaseServerViewModel:
      type: object
      required:
        - host
        - port
        - name
        - connectionStringFormat
        - type
      properties:
        id:
          type: string
          format: uuid
          x-yaver-ui:
            type: INPUT
            inputType: hidden
          x-yaver-mock:
            type: guid
        host:
          type: string
          example: opis.database.windows.net
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.databaseServer.host
            label: label.databaseServer.host
          x-yaver-mock:
            type: domain
        port:
          type: integer
          example: 5432
          x-yaver-ui:
            type: INPUT
            inputType: number
            placeholder: placeholder.databaseServer.port
            label: label.databaseServer.port
          x-yaver-mock:
            type: integer
            options:
              min: 10000
              max: 60000
        name:
          type: string
          example: opis-staging
          x-message-required: err.required
          maxLength: 20
          x-message-maxLength: err.maxLength
          minLength: 5
          x-message-minLength: err.minLength
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.databaseServer.name
            label: label.databaseServer.name
          x-yaver-mock:
            type: word
        connectionStringFormat:
          type: string
          example: Server={0};Port={1};Database={2};User Id={3};Password={4};
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.databaseServer.connectionStringFormat
            label: label.databaseServer.connectionStringFormat
          x-yaver-mock:
            type: word
        isDefault:
          type: boolean
          x-yaver-ui:
            type: SWITCH
            placeholder: placeholder.databaseServer.isDefault
            label: label.databaseServer.isDefault
          x-yaver-mock:
            type: bool
        isAvailable:
          type: boolean
          x-yaver-ui:
            type: SWITCH
            placeholder: placeholder.databaseServer.isAvailable
            label: label.databaseServer.isAvailable
          x-yaver-mock:
            type: bool
    DatabaseServerListItemModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        host:
          type: string
          example: opis.database.windows.net
          x-yaver-mock:
            type: domain
        port:
          type: integer
          example: 5432
          x-yaver-mock:
            type: integer
            options:
              min: 10000
              max: 60000
        name:
          type: string
          example: opis-stating
          x-yaver-mock:
            type: word
        connectionStringFormat:
          type: string
          example: Server={0};Port={1};Database={2};User Id={3};Password={4};
          x-yaver-mock:
            type: word
        isDefault:
          type: boolean
          example: true
          x-yaver-mock:
            type: bool
        isAvailable:
          type: boolean
          example: true
          x-yaver-mock:
            type: bool
    DatabaseServerListModel:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total items count
          x-yaver-mock:
            type: integer
            options:
              min: 0
              max: 30
        items:
          type: array
          items:
            $ref: "#/components/schemas/DatabaseServerListItemModel"
      example:
        totalCount: 1
        items:
          - id: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
            host: demo.database.linux.net
            port: 5432
            name: opis-staging
            connectionStringFormat: Server={0};Port={1};Database={2};User Id={3};Password={4};
            isDefault: true

            status: available
    # Tenants-------------------------------------------------------------
    TenantCreateModel:
      type: object
      properties:
        databaseId:
          type: string
          format: uuid
          x-yaver-validators:
            - type: required
              message: err.required
          x-yaver-ui:
            type: SELECT
            placeholder: placeholder.tenant.dbid
            label: label.tenant.dbid
        identifier:
          type: string
          example: caremark
          x-yaver-validators:
            - type: required
              message: err.required
            - type: pattern
              param: ^([a-z]\w*){6,32}$
              message: err.tenant.invalid-identifier
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.tenant.identifier
            label: label.tenant.identifier
        name:
          type: string
          example: ALBA  Health and Beauty Care Ltd.
          x-yaver-validators:
            - type: required
              message: err.required
            - type: maxLength
              param: 128
              message: err.maxLength
            - type: minLength
              param: 2
              message: err.minLength
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.tenant.name
            label: label.tenant.name
        brand:
          type: string
          example: OPIS
          x-yaver-validators:
            - type: required
              message: err.required
            - type: maxLength
              param: 128
              message: err.maxLength
            - type: minLength
              param: 2
              message: err.minLength
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.tenant.brand
            label: label.tenant.brand

    TenantViewModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
          x-yaver-ui:
            type: INPUT
            inputType: hidden
        databaseId:
          type: string
          format: uuid
          x-yaver-ui:
            type: SELECT
            placeholder: placeholder.tenant.dbid
            label: label.tenant.dbid
        identifier:
          type: string
          example: caremark
          x-yaver-mock:
            type: word
            options:
              length: 5
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.tenant.identifier
            label: label.tenant.identifier
        name:
          type: string
          example: Caremark Health and Beauty Care Ltd.
          x-yaver-validators:
            - type: required
              message: err.required
            - type: maxLength
              param: 128
              message: err.maxLength
            - type: minLength
              param: 2
              message: err.minLength
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.tenant.name
            label: label.tenant.name
          x-yaver-mock:
            type: company
        brand:
          type: string
          example: Caremark
          x-yaver-validators:
            - type: required
              message: err.required
            - type: maxLength
              param: 128
              message: err.maxLength
            - type: minLength
              param: 2
              message: err.minLength
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.tenant.brand
            label: label.tenant.brand
          x-yaver-mock:
            type: word
            options:
              length: 5
        authorizedPerson:
          type: string
          example: Pembe Panter
          x-yaver-validators:
            - type: required
              message: err.required
            - type: maxLength
              param: 64
              message: err.maxLength
            - type: minLength
              param: 2
              message: err.minLength
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.tenant.authorizedPerson
            label: label.tenant.authorizedPerson
          x-yaver-mock:
            type: name
        email:
          type: string
          example: pembe@panter.com
          x-yaver-validators:
            - type: email
              message: err.invalid-email
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.tenant.email
            label: label.tenant.email
          x-yaver-mock:
            type: email
        phoneNumber:
          type: string
          example: "+905321234567"
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.tenant.phone
            label: label.tenant.phone
          x-yaver-mock:
            type: phone
        address:
          type: string
          example: Falanca Avenue, Filanca Street, 12345, Istanbul, Turkey
          x-yaver-validators:
            - type: required
              message: err.required
            - type: maxLength
              param: 128
              message: err.maxLength
            - type: minLength
              param: 2
              message: err.minLength
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.tenant.address
            label: label.tenant.address
          x-yaver-mock:
            type: address
        defaultCardKey:
          type: string
          example: AABBCCDDEEFF
          x-yaver-validators:
            - type: maxLength
              param: 12
              message: err.maxLength
            - type: minLength
              param: 12
              message: err.minLength
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: label.tenant.cardKey
        logoUrl:
          type: string
          example: https://picsum.photos/536/354
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.tenant.logoUrl
            label: label.tenant.logoUrl
          x-yaver-mock:
            type: fixed
            options:
              value: https://picsum.photos/536/354
        isActive:
          type: boolean
          example: true
          x-yaver-ui:
            type: SWITCH
            label: label.tenant.isActive
          x-yaver-mock:
            type: bool

    TenantListModel:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total items count
          x-yaver-mock:
            type: integer
            options:
              min: 0
              max: 30
        items:
          type: array
          items:
            $ref: "#/components/schemas/TenantListItemModel"

    TenantListItemModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        identifier:
          type: string
          example: caremark
          x-yaver-mock:
            type: word
            options:
              length: 5
        name:
          type: string
          example: Caremark Health and Beauty Care Ltd.
          x-yaver-mock:
            type: company
        brand:
          type: string
          example: Caremark
          x-yaver-mock:
            type: word
            options:
              length: 5
        isActive:
          type: boolean
          example: true
          x-yaver-mock:
            type: bool

    # Machine Types-------------------------------------------------------

    MachineTypeViewModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-ui:
            type: INPUT
            inputType: hidden
          x-yaver-mock:
            type: guid
        name:
          type: string
          example: Sumac
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.machineType.name
            label: label.machineType.name
          x-yaver-validators:
            - type: required
              message: err.required
            - type: minLength
              param: 2
              message: err.minLength
          x-yaver-mock:
            type: animal
        description:
          type: string
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.machineType.description
            label: label.machineType.description
          x-yaver-mock:
            type: sentence
        manufacturer:
          type: string
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.machineType.manufacturer
            label: label.machineType.manufacturer
          x-yaver-mock:
            type: company
        dimensions:
          type: string
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.machineType.dimensions
            label: label.machineType.dimensions
        imageUrl:
          type: string
          x-yaver-ui:
            type: INPUT
            inputType: text
            placeholder: placeholder.machineType.imageUrl
            label: label.machineType.imageUrl
          x-yaver-mock:
            type: fixed
            options:
              value: https://picsum.photos/536/354
    MachineTypeListItemModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        name:
          type: string
          example: Sumac
          x-yaver-mock:
            type: animal
        manufacturer:
          type: string
          x-yaver-mock:
            type: company
    MachineTypeListModel:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total items count
          x-yaver-mock:
            type: integer
            options:
              min: 0
              max: 30
        items:
          type: array
          items:
            $ref: "#/components/schemas/MachineTypeListItemModel"
